// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(BiosegurityContext))]
    partial class BiosegurityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Addresstype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("addresstype", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdDepartment")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdDepartment" }, "city_iddepartment_foreign");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Contacttype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("contacttype", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateContract")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateEnd")
                        .HasColumnType("date");

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<int>("IdEmployee")
                        .HasColumnType("int");

                    b.Property<int>("IdState")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdClient" }, "contract_idclient_foreign");

                    b.HasIndex(new[] { "IdEmployee" }, "contract_idemployee_foreign");

                    b.HasIndex(new[] { "IdState" }, "contract_idstate_foreign");

                    b.ToTable("contract", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdCountry")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCountry" }, "department_idcountry_foreign");

                    b.ToTable("department", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateReg")
                        .HasColumnType("date");

                    b.Property<int>("IdCategory")
                        .HasColumnType("int");

                    b.Property<int>("IdCity")
                        .HasColumnType("int");

                    b.Property<int>("IdPerson")
                        .HasColumnType("int");

                    b.Property<int>("IdPersonType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCategory" }, "person_idcategory_foreign");

                    b.HasIndex(new[] { "IdCity" }, "person_idcity_foreign");

                    b.HasIndex(new[] { "IdPerson" }, "person_idperson_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "IdPersonType" }, "person_idpersontype_foreign");

                    b.ToTable("person", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Personaddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("IdAddressType")
                        .HasColumnType("int");

                    b.Property<int>("IdPerson")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdAddressType" }, "personaddress_idaddresstype_foreign");

                    b.HasIndex(new[] { "IdPerson" }, "personaddress_idperson_foreign");

                    b.ToTable("personaddress", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Personcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NameCategory")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("personcategory", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Personcontact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("IdContactType")
                        .HasColumnType("int");

                    b.Property<int>("IdPerson")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Description" }, "personcontact_description_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "IdContactType" }, "personcontact_idcontacttype_foreign");

                    b.HasIndex(new[] { "IdPerson" }, "personcontact_idperson_foreign");

                    b.ToTable("personcontact", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Persontype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("persontype", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Programming", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdContract")
                        .HasColumnType("int");

                    b.Property<int>("IdEmployee")
                        .HasColumnType("int");

                    b.Property<int>("IdShifts")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdContract" }, "programming_idcontract_foreign");

                    b.HasIndex(new[] { "IdEmployee" }, "programming_idemployee_foreign");

                    b.HasIndex(new[] { "IdShifts" }, "programming_idshifts_foreign");

                    b.ToTable("programming", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime");

                    b.Property<int>("IdUserFk")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime");

                    b.Property<string>("Token")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("IdUserFk");

                    b.ToTable("refreshToken", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ShiftName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<TimeOnly>("TimeShiftEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TimeShiftStart")
                        .HasColumnType("time");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("shifts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("state", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("varchar(225)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserRol", b =>
                {
                    b.Property<int>("IdUserFk")
                        .HasColumnType("int");

                    b.Property<int>("IdRolFk")
                        .HasColumnType("int");

                    b.HasKey("IdUserFk", "IdRolFk");

                    b.HasIndex("IdRolFk");

                    b.ToTable("userrol", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.HasOne("Domain.Entities.Department", "IdDepartmentNavigation")
                        .WithMany("Cities")
                        .HasForeignKey("IdDepartment")
                        .IsRequired()
                        .HasConstraintName("city_iddepartment_foreign");

                    b.Navigation("IdDepartmentNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.HasOne("Domain.Entities.Person", "IdClientNavigation")
                        .WithMany("ContractIdClientNavigations")
                        .HasForeignKey("IdClient")
                        .IsRequired()
                        .HasConstraintName("contract_idclient_foreign");

                    b.HasOne("Domain.Entities.Person", "IdEmployeeNavigation")
                        .WithMany("ContractIdEmployeeNavigations")
                        .HasForeignKey("IdEmployee")
                        .IsRequired()
                        .HasConstraintName("contract_idemployee_foreign");

                    b.HasOne("Domain.Entities.State", "IdStateNavigation")
                        .WithMany("Contracts")
                        .HasForeignKey("IdState")
                        .IsRequired()
                        .HasConstraintName("contract_idstate_foreign");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdEmployeeNavigation");

                    b.Navigation("IdStateNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.HasOne("Domain.Entities.Country", "IdCountryNavigation")
                        .WithMany("Departments")
                        .HasForeignKey("IdCountry")
                        .IsRequired()
                        .HasConstraintName("department_idcountry_foreign");

                    b.Navigation("IdCountryNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.HasOne("Domain.Entities.Personcategory", "IdCategoryNavigation")
                        .WithMany("People")
                        .HasForeignKey("IdCategory")
                        .IsRequired()
                        .HasConstraintName("person_idcategory_foreign");

                    b.HasOne("Domain.Entities.City", "IdCityNavigation")
                        .WithMany("People")
                        .HasForeignKey("IdCity")
                        .IsRequired()
                        .HasConstraintName("person_idcity_foreign");

                    b.HasOne("Domain.Entities.Persontype", "IdPersonTypeNavigation")
                        .WithMany("People")
                        .HasForeignKey("IdPersonType")
                        .IsRequired()
                        .HasConstraintName("person_idpersontype_foreign");

                    b.Navigation("IdCategoryNavigation");

                    b.Navigation("IdCityNavigation");

                    b.Navigation("IdPersonTypeNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Personaddress", b =>
                {
                    b.HasOne("Domain.Entities.Addresstype", "IdAddressTypeNavigation")
                        .WithMany("Personaddresses")
                        .HasForeignKey("IdAddressType")
                        .IsRequired()
                        .HasConstraintName("personaddress_idaddresstype_foreign");

                    b.HasOne("Domain.Entities.Person", "IdPersonNavigation")
                        .WithMany("Personaddresses")
                        .HasForeignKey("IdPerson")
                        .IsRequired()
                        .HasConstraintName("personaddress_idperson_foreign");

                    b.Navigation("IdAddressTypeNavigation");

                    b.Navigation("IdPersonNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Personcontact", b =>
                {
                    b.HasOne("Domain.Entities.Contacttype", "IdContactTypeNavigation")
                        .WithMany("Personcontacts")
                        .HasForeignKey("IdContactType")
                        .IsRequired()
                        .HasConstraintName("personcontact_idcontacttype_foreign");

                    b.HasOne("Domain.Entities.Person", "IdPersonNavigation")
                        .WithMany("Personcontacts")
                        .HasForeignKey("IdPerson")
                        .IsRequired()
                        .HasConstraintName("personcontact_idperson_foreign");

                    b.Navigation("IdContactTypeNavigation");

                    b.Navigation("IdPersonNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Programming", b =>
                {
                    b.HasOne("Domain.Entities.Contract", "IdContractNavigation")
                        .WithMany("Programmings")
                        .HasForeignKey("IdContract")
                        .IsRequired()
                        .HasConstraintName("programming_idcontract_foreign");

                    b.HasOne("Domain.Entities.Person", "IdEmployeeNavigation")
                        .WithMany("Programmings")
                        .HasForeignKey("IdEmployee")
                        .IsRequired()
                        .HasConstraintName("programming_idemployee_foreign");

                    b.HasOne("Domain.Entities.Shift", "IdShiftsNavigation")
                        .WithMany("Programmings")
                        .HasForeignKey("IdShifts")
                        .IsRequired()
                        .HasConstraintName("programming_idshifts_foreign");

                    b.Navigation("IdContractNavigation");

                    b.Navigation("IdEmployeeNavigation");

                    b.Navigation("IdShiftsNavigation");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "Users")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("IdUserFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.UserRol", b =>
                {
                    b.HasOne("Domain.Entities.Rol", "Rols")
                        .WithMany("UserRols")
                        .HasForeignKey("IdRolFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Users")
                        .WithMany("UserRols")
                        .HasForeignKey("IdUserFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rols");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Addresstype", b =>
                {
                    b.Navigation("Personaddresses");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("Domain.Entities.Contacttype", b =>
                {
                    b.Navigation("Personcontacts");
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.Navigation("Programmings");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Navigation("ContractIdClientNavigations");

                    b.Navigation("ContractIdEmployeeNavigations");

                    b.Navigation("Personaddresses");

                    b.Navigation("Personcontacts");

                    b.Navigation("Programmings");
                });

            modelBuilder.Entity("Domain.Entities.Personcategory", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("Domain.Entities.Persontype", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Navigation("UserRols");
                });

            modelBuilder.Entity("Domain.Entities.Shift", b =>
                {
                    b.Navigation("Programmings");
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRols");
                });
#pragma warning restore 612, 618
        }
    }
}
